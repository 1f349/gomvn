// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package database

import (
	"context"
)

const checkUserDetails = `-- name: CheckUserDetails :one
SELECT 1
FROM users
WHERE name = ?
  AND token_hash = ?
`

type CheckUserDetailsParams struct {
	Name      string `json:"name"`
	TokenHash string `json:"token_hash"`
}

func (q *Queries) CheckUserDetails(ctx context.Context, arg CheckUserDetailsParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkUserDetails, arg.Name, arg.TokenHash)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const countUsers = `-- name: CountUsers :one
SELECT count(*)
FROM users
`

func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :execlastid
INSERT INTO users (name, admin, token_hash)
VALUES (?, ?, ?)
`

type CreateUserParams struct {
	Name      string `json:"name"`
	Admin     bool   `json:"admin"`
	TokenHash string `json:"token_hash"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createUser, arg.Name, arg.Admin, arg.TokenHash)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, name
FROM users
`

type GetAllUsersRow struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) GetAllUsers(ctx context.Context) ([]GetAllUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUsersRow
	for rows.Next() {
		var i GetAllUsersRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isAdmin = `-- name: IsAdmin :one
SELECT 1
FROM users
WHERE admin = 1
  AND token_hash = ?
`

func (q *Queries) IsAdmin(ctx context.Context, tokenHash string) (int64, error) {
	row := q.db.QueryRowContext(ctx, isAdmin, tokenHash)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const isValid = `-- name: IsValid :one
SELECT 1
FROM users
WHERE token_hash = ?
`

func (q *Queries) IsValid(ctx context.Context, tokenHash string) (int64, error) {
	row := q.db.QueryRowContext(ctx, isValid, tokenHash)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const refreshUserToken = `-- name: RefreshUserToken :exec
UPDATE users
SET token_hash =?
WHERE id = ?
  AND token_hash = ?
`

type RefreshUserTokenParams struct {
	TokenHash   string `json:"token_hash"`
	ID          int64  `json:"id"`
	TokenHash_2 string `json:"token_hash_2"`
}

func (q *Queries) RefreshUserToken(ctx context.Context, arg RefreshUserTokenParams) error {
	_, err := q.db.ExecContext(ctx, refreshUserToken, arg.TokenHash, arg.ID, arg.TokenHash_2)
	return err
}
